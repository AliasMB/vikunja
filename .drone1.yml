kind: pipeline
name: testing

workspace:
  base: /srv/app
  path: src/code.vikunja.io/api

clone:
  depth: 50

services:
  - name: test-db-unit
    image: mariadb:10
    environment:
      MYSQL_ROOT_PASSWORD: vikunjatest
      MYSQL_DATABASE: vikunjatest
  - name: test-db-integration
    image: mariadb:10
    environment:
      MYSQL_ROOT_PASSWORD: vikunjatest
      MYSQL_DATABASE: vikunjatest

steps:
  - name: fetch-tags
    image: docker:git
    commands:
      - git fetch --tags
    when:
      event: [ tag ]

  - name: build
    image: vikunja/golang-build:latest
    pull: true
    environment:
      TAGS: bindata sqlite
    commands:
      - make lint
      - make fmt-check
      # - make got-swag # Commented out until we figured out how to get this working on drone
      - make ineffassign-check
      - make misspell-check
      - make goconst-check
      - make gocyclo-check
      - make static-check
      - make build
    when:
      event: [ push, tag, pull_request ]

  - name: test
    image: vikunja/golang-build:latest
    pull: true
    commands:
      - make test
    depends_on: [ build ]
    when:
      event: [ push, tag, pull_request ]

  - name: test-sqlite
    image: vikunja/golang-build:latest
    pull: true
    environment:
      VIKUNJA_TESTS_USE_CONFIG: 1
      VIKUNJA_DATABASE_TYPE: sqlite
    commands:
      - make test
    depends_on: [ build ]
    when:
      event: [ push, tag, pull_request ]

  - name: test-mysql
    image: vikunja/golang-build:latest
    pull: true
    environment:
      VIKUNJA_TESTS_USE_CONFIG: 1
      VIKUNJA_DATABASE_TYPE: mysql
      VIKUNJA_DATABASE_HOST: test-db-unit
      VIKUNJA_DATABASE_USER: root
      VIKUNJA_DATABASE_PASSWORD: vikunjatest
      VIKUNJA_DATABASE_DATABASE: vikunjatest
    commands:
      - make test
    depends_on: [ build ]
    when:
      event: [ push, tag, pull_request ]

  - name: integration-test
    image: vikunja/golang-build:latest
    pull: true
    commands:
      - make integration-test
    depends_on: [ build ]
    when:
      event: [ push, tag, pull_request ]

  - name: integration-test-sqlite
    image: vikunja/golang-build:latest
    pull: true
    environment:
      VIKUNJA_TESTS_USE_CONFIG: 1
      VIKUNJA_DATABASE_TYPE: sqlite
    commands:
      - make integration-test
    depends_on: [ build ]
    when:
      event: [ push, tag, pull_request ]

  - name: integration-test-mysql
    image: vikunja/golang-build:latest
    pull: true
    environment:
      VIKUNJA_TESTS_USE_CONFIG: 1
      VIKUNJA_DATABASE_TYPE: mysql
      VIKUNJA_DATABASE_HOST: test-db-integration
      VIKUNJA_DATABASE_USER: root
      VIKUNJA_DATABASE_PASSWORD: vikunjatest
      VIKUNJA_DATABASE_DATABASE: vikunjatest
    commands:
      - make integration-test
    depends_on: [ build ]
    when:
      event: [ push, tag, pull_request ]

---
########
# Build a release when pushing to master
# We need to copy this because drone currently can't run a pipeline on either a push to master or a tag.
########

kind: pipeline
name: deploy-master
depends_on:
  - testing

workspace:
  base: /srv/app
  path: src/code.vikunja.io/api

clone:
  depth: 50

trigger:
  branch:
    - master
  event:
    - push

steps:
  - name: before-static-build
    image: karalabe/xgo-latest:latest
    pull: true
    commands:
      - make release-dirs

  - name: static-build-windows
    image: karalabe/xgo-latest:latest
    pull: true
    environment:
      GOPATH: /srv/app
    commands:
      - make release-windows
    depends_on: [ before-static-build ]

  - name: static-build-linux
    image: karalabe/xgo-latest:latest
    pull: true
    environment:
      GOPATH: /srv/app
    commands:
      - make release-linux
    depends_on: [ before-static-build ]

  - name: static-build-darwin
    image: karalabe/xgo-latest:latest
    pull: true
    environment:
      GOPATH: /srv/app
    commands:
      - make release-darwin
    depends_on: [ before-static-build ]

  - name: after-build-static
    image: karalabe/xgo-latest:latest
    pull: true
    depends_on:
      - static-build-windows
      - static-build-linux
      - static-build-darwin
    commands:
      - make release-copy
      - make release-check
      - make release-os-package
      - make release-zip

  - name: sign-release
    image: plugins/gpgsign:1
    pull: true
    depends_on: [ after-build-static ]
    settings:
      key:
        from_secret: gpg_privkey
      passphrase:
        from_secret: gpg_password
      files:
        - dist/zip/*
      detach_sign: true

# Push the releases to our pseudo-s3-bucket
  - name: release-latest
    image: plugins/s3:1
    pull: true
    settings:
      bucket: vikunja
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      endpoint: https://storage.kolaente.de
      path_style: true
      strip_prefix: dist/zip/
      source: dist/zip/*
      target: /master/
    depends_on: [ sign-release ]

  # Build a debian package and push it to our bucket
  - name: build-deb
    image: kolaente/fpm
    pull: true
    commands:
      - echo $DRONE_TAG
      - echo $DRONE_BRANCH
      - echo $VERSION
      - git version
      - git describe --tags --always --abbrev=10
      - git describe --tags --always --abbrev=10 | sed 's/-/+/'
      - git describe --tags --always --abbrev=10 | sed 's/-/+/' | sed 's/^v//'
      - git describe --tags --always --abbrev=10 | sed 's/-/+/' | sed 's/^v//' | sed 's/-g/-/'
      - make build-deb
    depends_on: [ static-build-linux ]

  - name: deb-structure
    image: kolaente/reprepro
    pull: true
    environment:
      GPG_PRIVATE_KEY:
        from_secret: gpg_privatekey
    commands:
      - export GPG_TTY=$(tty)
      - gpg -qk
      - echo "use-agent" >>  ~/.gnupg/gpg.conf
      - gpgconf --kill gpg-agent
      - echo $GPG_PRIVATE_KEY > ~/frederik.gpg
      - gpg --import ~/frederik.gpg
      - mkdir debian/conf -p
      - cp build/reprepro-dist-conf debian/conf/distributions
      - make reprepro
    depends_on: [ build-deb ]

  # Push the releases to our pseudo-s3-bucket
  - name: release-deb
    image: plugins/s3:1
    pull: true
    settings:
      bucket: vikunja-deb
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      endpoint: https://storage.kolaente.de
      path_style: true
      strip_prefix: debian
      source: debian/*/*/*/*/*
      target: /
    depends_on: [ deb-structure ]

# Build the docker image and push it to docker hub
  - name: docker
    image: plugins/docker
    pull: true
    settings:
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      repo: vikunja/api
      auto_tag: true

# Update the instance on try.vikunja.io
  - name: rancher
    image: peloton/drone-rancher
    settings:
      url: http://server01.kolaente.de:8080/v1
      access_key:
        from_secret: RANCHER_ACCESS_KEY
      secret_key:
        from_secret: RANCHER_SECRET_KEY
      service: vikunja-dev/api
      docker_image: vikunja/api
      confirm: true
    depends_on: [ docker ]

  - name: telegram
    image: appleboy/drone-telegram
    depends_on:
      - rancher
      - release-latest
    settings:
      token:
        from_secret: TELEGRAM_TOKEN
      to:
        from_secret: TELEGRAM_TO
      message: >
        {{repo.owner}}/{{repo.name}}: \[{{build.status}}] Build {{build.number}}
        {{commit.author}} pushed to {{commit.branch}} {{commit.sha}}: `{{commit.message}}`
        Build started at {{datetime build.started "2006-Jan-02T15:04:05Z" "GMT+2"}} finished at {{datetime build.finished "2006-Jan-02T15:04:05Z" "GMT+2"}}.
    when:
      status:
        - success
        - failure
---
########
# Build a release when tagging
# We need to copy this because drone currently can't run a pipeline on either a push to master or a tag.
########

kind: pipeline
name: deploy-version
depends_on:
  - testing

workspace:
  base: /srv/app
  path: src/code.vikunja.io/api

clone:
  depth: 50

trigger:
  event:
    - tag

steps:
  - name: fetch-tags
    image: docker:git
    commands:
      - git fetch --tags

  - name: before-static-build
    image: karalabe/xgo-latest:latest
    pull: true
    commands:
      - make release-dirs

  - name: static-build-windows
    image: karalabe/xgo-latest:latest
    pull: true
    environment:
      GOPATH: /srv/app
    commands:
      - make release-windows
    depends_on: [ before-static-build ]

  - name: static-build-linux
    image: karalabe/xgo-latest:latest
    pull: true
    environment:
      GOPATH: /srv/app
    commands:
      - make release-linux
    depends_on: [ before-static-build ]

  - name: static-build-darwin
    image: karalabe/xgo-latest:latest
    pull: true
    environment:
      GOPATH: /srv/app
    commands:
      - make release-darwin
    depends_on: [ before-static-build ]

  - name: after-build-static
    image: karalabe/xgo-latest:latest
    pull: true
    depends_on:
      - static-build-windows
      - static-build-linux
      - static-build-darwin
    commands:
      - make release-copy
      - make release-check
      - make release-os-package
      - make release-zip

  - name: sign-release
    image: plugins/gpgsign:1
    pull: true
    depends_on: [ after-build-static ]
    settings:
      key:
        from_secret: gpg_privkey
      passphrase:
        from_secret: gpg_password
      files:
        - dist/zip/*
      detach_sign: true

# Push the releases to our pseudo-s3-bucket
  - name: release-version
    image: plugins/s3:1
    pull: true
    settings:
      bucket: vikunja
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      endpoint: https://storage.kolaente.de
      path_style: true
      strip_prefix: dist/zip/
      source: dist/zip/*
      target: /${DRONE_TAG##v}/
    depends_on: [ sign-release ]

  # Build a debian package and push it to our bucket
  - name: build-deb
    image: kolaente/fpm
    pull: true
    commands:
      - make build-deb
    depends_on: [ static-build-linux ]

  - name: deb-structure
    image: kolaente/reprepro
    pull: true
    environment:
      GPG_PRIVATE_KEY:
        from_secret: gpg_privatekey
    commands:
      - export GPG_TTY=$(tty)
      - gpg -qk
      - echo "use-agent" >>  ~/.gnupg/gpg.conf
      - gpgconf --kill gpg-agent
      - echo $GPG_PRIVATE_KEY > ~/frederik.gpg
      - gpg --import ~/frederik.gpg
      - mkdir debian/conf -p
      - cp build/reprepro-dist-conf debian/conf/distributions
      - make reprepro
    depends_on: [ build-deb ]

  # Push the releases to our pseudo-s3-bucket
  - name: release-deb
    image: plugins/s3:1
    pull: true
    settings:
      bucket: vikunja-deb
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      endpoint: https://storage.kolaente.de
      path_style: true
      strip_prefix: debian
      source: debian/*/*/*/*/*
      target: /
    depends_on: [ deb-structure ]

# Build the docker image and push it to docker hub
  - name: docker
    image: plugins/docker
    pull: true
    settings:
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      repo: vikunja/api
      auto_tag: true

  - name: telegram
    image: appleboy/drone-telegram
    depends_on:
      - docker
      - release-version
    settings:
      token:
        from_secret: TELEGRAM_TOKEN
      to:
        from_secret: TELEGRAM_TO
      message: >
        {{repo.owner}}/{{repo.name}}: \[{{build.status}}] Build {{build.number}}
        {{commit.author}} pushed to {{commit.branch}} {{commit.sha}}: `{{commit.message}}`
        Build started at {{datetime build.started "2006-Jan-02T15:04:05Z" "GMT+2"}} finished at {{datetime build.finished "2006-Jan-02T15:04:05Z" "GMT+2"}}.
    when:
      status:
        - success
        - failure

---
kind: pipeline
name: deploy-docs

workspace:
  base: /srv/app
  path: src/code.vikunja.io/api

clone:
  depth: 50

trigger:
  event:
    - push
  branch:
    - master

steps:
  - name: submodules
    image: docker:git
    commands:
      - git submodule update --init
      - git submodule update --recursive --remote

  - name: build
    image: monachus/hugo:v0.54.0
    pull: true
    commands:
      - cd docs
      - hugo
      - mv public/docs/* public # Hugo seems to be not capable of setting a different theme for a home page, so we do this ugly hack to fix it.

  - name: docker
    image: plugins/docker
    pull: true
    settings:
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      repo: vikunja/docs
      context: docs/
      dockerfile: docs/Dockerfile

  - name: rancher
    image: peloton/drone-rancher
    settings:
      url: http://server01.kolaente.de:8080/v1
      access_key:
        from_secret: RANCHER_ACCESS_KEY
      secret_key:
        from_secret: RANCHER_SECRET_KEY
      service: vikunja-website/docs
      docker_image: vikunja/docs
      confirm: true